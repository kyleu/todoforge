// Code generated by qtc from "audit.sql". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

// --

//line queries/ddl/audit.sql:1
package ddl

//line queries/ddl/audit.sql:1
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line queries/ddl/audit.sql:1
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line queries/ddl/audit.sql:1
func StreamAuditDrop(qw422016 *qt422016.Writer) {
//line queries/ddl/audit.sql:1
	qw422016.N().S(`
drop table if exists "audit_record";
drop table if exists "audit";
-- `)
//line queries/ddl/audit.sql:4
}

//line queries/ddl/audit.sql:4
func WriteAuditDrop(qq422016 qtio422016.Writer) {
//line queries/ddl/audit.sql:4
	qw422016 := qt422016.AcquireWriter(qq422016)
//line queries/ddl/audit.sql:4
	StreamAuditDrop(qw422016)
//line queries/ddl/audit.sql:4
	qt422016.ReleaseWriter(qw422016)
//line queries/ddl/audit.sql:4
}

//line queries/ddl/audit.sql:4
func AuditDrop() string {
//line queries/ddl/audit.sql:4
	qb422016 := qt422016.AcquireByteBuffer()
//line queries/ddl/audit.sql:4
	WriteAuditDrop(qb422016)
//line queries/ddl/audit.sql:4
	qs422016 := string(qb422016.B)
//line queries/ddl/audit.sql:4
	qt422016.ReleaseByteBuffer(qb422016)
//line queries/ddl/audit.sql:4
	return qs422016
//line queries/ddl/audit.sql:4
}

// --

//line queries/ddl/audit.sql:6
func StreamAuditCreate(qw422016 *qt422016.Writer) {
//line queries/ddl/audit.sql:6
	qw422016.N().S(`
create table if not exists "audit" (
  "id" uuid not null,
  "app" text not null,
  "act" text not null,
  "client" text not null,
  "server" text not null,
  "user" text not null,
  "metadata" jsonb not null,
  "message" text not null,
  "started" timestamp not null default current_timestamp,
  "completed" timestamp not null default current_timestamp,
  primary key ("id")
);

create index if not exists "audit__act" on "audit" ("act");
create index if not exists "audit__app" on "audit" ("app");
create index if not exists "audit__client" on "audit" ("client");
create index if not exists "audit__server" on "audit" ("server");
create index if not exists "audit__user_id" on "audit" ("user");

create table if not exists "audit_record" (
  "id" uuid not null,
  "audit_id" uuid not null,
  "t" text not null,
  "pk" text not null,
  "changes" jsonb not null,
  "metadata" jsonb not null,
  "occurred" timestamp not null default current_timestamp,
  foreign key ("audit_id") references "audit" ("id"),
  primary key ("id")
);

create index if not exists "audit_record__t" on "audit_record"("t");
create index if not exists "audit_record__pk" on "audit_record"("pk");
create index if not exists "audit_record__changes" on "audit_record"("changes");
create index if not exists "audit_record__metadata" on "audit_record"("metadata");

create index if not exists "audit_record__audit_id_idx" on "audit_record" ("audit_id");
-- `)
//line queries/ddl/audit.sql:45
}

//line queries/ddl/audit.sql:45
func WriteAuditCreate(qq422016 qtio422016.Writer) {
//line queries/ddl/audit.sql:45
	qw422016 := qt422016.AcquireWriter(qq422016)
//line queries/ddl/audit.sql:45
	StreamAuditCreate(qw422016)
//line queries/ddl/audit.sql:45
	qt422016.ReleaseWriter(qw422016)
//line queries/ddl/audit.sql:45
}

//line queries/ddl/audit.sql:45
func AuditCreate() string {
//line queries/ddl/audit.sql:45
	qb422016 := qt422016.AcquireByteBuffer()
//line queries/ddl/audit.sql:45
	WriteAuditCreate(qb422016)
//line queries/ddl/audit.sql:45
	qs422016 := string(qb422016.B)
//line queries/ddl/audit.sql:45
	qt422016.ReleaseByteBuffer(qb422016)
//line queries/ddl/audit.sql:45
	return qs422016
//line queries/ddl/audit.sql:45
}
